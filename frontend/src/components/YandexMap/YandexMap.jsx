import React, { useEffect, useRef } from 'react';
import './YandexMap.css';

const YandexMap = ({ coordinates, amenities }) => {
  const mapRef = useRef(null);

  const getAmenityIcon = (category) => {
    const icons = {
      station: 'üöå',
      school: 'üè´',
      kindergarten: 'üè†',
      pickup_point: 'üì¶',
      polyclinic: 'üè•',
      center: 'üèôÔ∏è',
      gym: 'üí™',
      mall: 'üõçÔ∏è',
      college_and_university: 'üéì',
      beauty_salon: 'üíá',
      pharmacy: 'üíä',
      grocery_store: 'üõí',
      restaurant: 'üçΩÔ∏è',
      park: 'üå≥',
      bank: 'üè¶',
      religious: '‚õ™',
    };
    return icons[category] || 'üìç';
  };

  const getAmenityLabel = (key) => {
    const labels = {
      station: '–û—Å—Ç–∞–Ω–æ–≤–∫–∞',
      school: '–®–∫–æ–ª–∞',
      kindergarten: '–î–µ—Ç—Å–∫–∏–π —Å–∞–¥',
      pickup_point: '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
      polyclinic: '–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞',
      center: '–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞',
      gym: '–°–ø–æ—Ä—Ç–∑–∞–ª',
      mall: '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
      college_and_university: '–ö–æ–ª–ª–µ–¥–∂–∏ –∏ –í—É–∑—ã',
      beauty_salon: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã',
      pharmacy: '–ê–ø—Ç–µ–∫–∞',
      grocery_store: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω',
      religious: '–†–µ–ª–∏–≥–∏–æ–∑–Ω–æ–µ –º–µ—Å—Ç–æ',
      restaurant: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
      bank: '–ë–∞–Ω–∫',
      park: '–ü–∞—Ä–∫',
    };
    return labels[key] || key;
  };

  useEffect(() => {
    if (!coordinates || !window.ymaps) return;

    const [lat, lon] = coordinates.split(',').map(coord => parseFloat(coord.trim()));
    if (isNaN(lat) || isNaN(lon)) return;

    window.ymaps.ready(() => {
      const map = new window.ymaps.Map(mapRef.current, {
        center: [lat, lon],
        zoom: 15,
        controls: ['zoomControl', 'geolocationControl'],
      }, {
        suppressMapOpenBlock: true,
        yandexMapDisablePoiInteractivity: true,
      });

      // –ì–ª–∞–≤–Ω–∞—è –º–µ—Ç–∫–∞ (–æ–±—ä–µ–∫—Ç)
      const mainPlacemark = new window.ymaps.Placemark([lat, lon], {
        balloonContent: '–ó–¥–∞–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å',
        hintContent: '–ó–¥–∞–Ω–∏–µ',
      }, {
        preset: 'islands#redIcon',
        zIndex: 1000,
      });

      map.geoObjects.add(mainPlacemark);

      // –ú–µ—Ç–∫–∏ —É–¥–æ–±—Å—Ç–≤
      if (amenities?.length) {
        amenities.forEach(amenity => {
          const [amenityLat, amenityLon] = amenity.coordinates.split(',').map(parseFloat);
          if (isNaN(amenityLat) || isNaN(amenityLon)) return;

          const icon = getAmenityIcon(amenity.category);

          const layout = window.ymaps.templateLayoutFactory.createClass(`
            <div style="
              font-size: 18px;
              width: 36px;
              height: 36px;
              background: #fff;
              border: 2px solid #1e88e5;
              border-radius: 50%;
              box-shadow: 0 2px 6px rgba(0,0,0,0.3);
              display: flex;
              align-items: center;
              justify-content: center;
              transition: transform 0.2s;
              cursor: pointer;
            ">${icon}</div>
          `);

          const placemark = new window.ymaps.Placemark([amenityLat, amenityLon], {
            balloonContent: `
              <strong>${amenity.title}</strong><br/>
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getAmenityLabel(amenity.category)}<br/>
              –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${amenity.distance.toFixed(2)} –º
            `,
            hintContent: `${amenity.title} (${amenity.distance.toFixed(2)} –º)`
          }, {
            iconLayout: 'default#imageWithContent',
            iconContentLayout: layout,
            iconOffset: [-18, -18],
            hintOffset: [0, 20],
            hasBalloon: true,
            hasHint: true,
            hideIconOnBalloonOpen: false,
            iconShape: {
              type: 'Circle',
              coordinates: [18, 18], // –¶–µ–Ω—Ç—Ä –∏–∫–æ–Ω–∫–∏ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö –æ—Ç –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ layout)
              radius: 18 // –†–∞–¥–∏—É—Å ‚Äî —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —Ç–≤–æ—è –∏–∫–æ–Ω–∫–∞ –ø–æ —Å—Ç–∏–ª—é
            }
          });

          map.geoObjects.add(placemark);
        });
      }
    });
  }, [coordinates, amenities]);

  return <div ref={mapRef} className="ymap" />;
};

export default YandexMap;
